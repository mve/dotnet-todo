@using blazor.viewmodels
@using System.ComponentModel

@implements IDisposable

@inject ITodoViewModel TodoVM

@if (TodoVM.TodoItems != null && TodoVM.TodoItems.Count > 0)
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th class="text-center">Status</th>
            <th>Taak</th>
            <th></th>
        </tr>
        </thead>
        <tbody>

        @foreach (var item in TodoVM.TodoItems)
        {
            @if (TodoVM.filter == "all" || TodoVM.filter == "completed" && item.IsComplete || TodoVM.filter == "todo" && item.IsComplete == false)
            {
                <tr>
                    <td class="text-center pt-3" @onclick="@(() => TodoVM.ToggleStatus(item.Id))">
                        @if (item.IsComplete)
                        {
                            <i class="fa-solid fa-square-check fs-2"></i>
                        }
                        else
                        {
                            <i class="fa-solid fa-square fs-2"></i>
                        }
                    </td>

                    <td class="pt-3">
                        @if (TodoVM.SelectedItem != null && TodoVM.SelectedItem.Id == item.Id)
                        {
                            <input type="text" class="form-control" @bind="TodoVM.SelectedItem.Name"/>
                        }
                        else
                        {
                            @item.Name
                        }

                    </td>

                    <td class="text-center">

                        @if (TodoVM.SelectedItem != null && TodoVM.SelectedItem.Id == item.Id)
                        {
                            <button class="btn btn-success px-3 fs-5"
                                    @onclick="TodoVM.SaveItem">
                                <i class="fa-solid fa-floppy-disk"></i>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-warning px-3 fs-5"
                                    @onclick="@(() => TodoVM.EditItem(item.Id))">
                                <i class="fa-solid fa-pen"></i>
                            </button>
                        }


                        <button class="btn btn-danger px-3 ms-2 fs-5"
                                @onclick="@(async () => await TodoVM.DeleteItem(item.Id))">
                            <i class="fa-solid fa-xmark"></i>
                        </button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
}
else
{
    <p>Geen todo items gevonden.</p>
}

@code {
    // Fetch items and subscribe to PropertyChanged.
    protected override async Task OnInitializedAsync()
    {
        TodoVM.PropertyChanged += OnPropertyChangedHandler;
        await TodoVM.GetTodoItems();

        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() => { StateHasChanged(); });
    }

    public void Dispose()
    {
        TodoVM.PropertyChanged -= OnPropertyChangedHandler;
    }
}