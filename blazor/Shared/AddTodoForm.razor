@using blazor.viewmodels
@using System.ComponentModel

@inject ITodoViewModel TodoVM

<div class="d-flex">

    <div style="flex: 2;" class="input-group mb-3 pe-3">
        <input @bind="TodoVM.newItemName" type="text" class="form-control" placeholder="Nieuw todo item" aria-label="Recipient's username">
        <button class="btn btn-outline-primary" type="button" @onclick="TodoVM.AddItem">
            <i class="fa-solid fa-plus"></i>
        </button>
    </div>

    <div style="flex: 1;" class="input-group mb-3">

        <select @bind="TodoVM.filter" class="form-select">
            <option value="all">Alle</option>
            <option value="completed">Voltooid</option>
            <option value="todo">Te doen</option>
        </select>

    </div>

</div>

@if (TodoVM.errorMessage.Length > 0)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Error:</strong> @TodoVM.errorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="TodoVM.ClearErrorMessage"></button>
    </div>
}

@code {
    // Fetch items and subscribe to PropertyChanged.
    protected override async Task OnInitializedAsync()
    {
        TodoVM.PropertyChanged += OnPropertyChangedHandler;
        await TodoVM.GetTodoItems();

        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() => { StateHasChanged(); });
    }

    public void Dispose()
    {
        TodoVM.PropertyChanged -= OnPropertyChangedHandler;
    }
}