@using blazor.viewmodels
@using System.ComponentModel

@inject ITodoViewModel TodoVM    

@if (TodoVM.SelectedItem != null)
{
    <table>
        <tbody>
        <tr>
            <th>Complete?</th>
            <th>Name</th>
            <th>Actions</th>
        </tr>
        <tr id="editRow" style="display:@TodoVM.editRowStyle">
            <td class="text-center">
                <input type="checkbox" @bind="TodoVM.SelectedItem.IsComplete"/>
            </td>
            <td>
                <input @bind="TodoVM.SelectedItem.Name"/>
            </td>
            <td class="text-center">
                <button class="btn btn-success" @onclick="TodoVM.SaveItem">
                    Save
                </button>
                <button class="btn btn-danger" @onclick="@(() => TodoVM.editRowStyle = "none")">
                    Cancel
                </button>
            </td>
        </tr>
        </tbody>
    </table>
}

@code {
    // Subscribe to PropertyChanged.
    protected override async Task OnInitializedAsync()
    {
        TodoVM.PropertyChanged += OnPropertyChangedHandler;
        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() => { StateHasChanged(); });
    }

    public void Dispose()
    {
        TodoVM.PropertyChanged -= OnPropertyChangedHandler;
    }
}